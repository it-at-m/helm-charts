# Default values for java-spring-boot.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  # required, must be specified, e.g. "ghcr.io/it-at-m/ezldap"
  repository: ""
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # required, must be specified, e.g. "latest"
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
# on OpenShift you typically use 'Route' instead of 'Ingress', see 'routes' section of values.yaml
ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Configures resources (requests and limits)
# for java applications memory reqeuest and limits should be equal
resources:
  requests:
    cpu: 50m
    memory: 750Mi
  limits:
    cpu: 500m
    memory: 750Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /actuator/health/liveness
    port: http
  timeoutSeconds: 15
  periodSeconds: 10
  failureThreshold: 5
readinessProbe:
  httpGet:
    path: /actuator/health/readiness
    port: http
  timeoutSeconds: 15
  periodSeconds: 10
  failureThreshold: 5
startupProbe:
  httpGet:
    path: /actuator/health/liveness
    port: http
  timeoutSeconds: 5
  periodSeconds: 10
  failureThreshold: 30

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# imageWorkDir is the working directory of the image, default in UBI9 images is '/deployments'
imageWorkDir: "/deployments"

# configure extra environment vars on the output Deployment definition
envVars:
  {}
  # - name: "TZ"
  #   value: "Europe/Berlin"
  # - name: LC_ALL
  #   value: C.utf8
  # - name: "GC_MAX_METASPACE_SIZE"
  #   value: "200"
  # - name: "SPRING_PROFILES_ACTIVE"
  #   value: "openshift"
  # - name: APPDYNAMICS_AGENT_ACCOUNT_NAME
  #   valueFrom:
  #     secretKeyRef:
  #       name: appd
  #       key: accountName
  # - name: APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY
  #   valueFrom:
  #     secretKeyRef:
  #       name: appd
  #       key: accountAccessKey

# configure envFrom (sets env vars from configMaps or secrets) on the output Deployment definition
envFrom:
  {}
  # - prefix: EZLDAP_LDAP_
  #   secretRef:
  #     name: my-secret

# configures application.yml content that get mounted on the output Deployment definition. Helm template functions are supported.
applicationYml: ""
# applicationYml: |-
#   spring:
#     application:
#       name: "{{ .Release.Name }}"
#     profiles:
#       active: "local"
#   logging:
#     level:
#       root: "DEBUG"

javaTruststore:
  # enables mounting a java truststore containing additional certificates
  enabled: false
  # configure secret name and secret key that contains the java truststore
  secretName: "cacerts-lhm"
  secretKey: "cacerts-lhm"
  # configure the mountpath for the truststore file
  mountPath: /etc/pki/ca-trust/extracted/java

# routes configures OpenShift Route(s) pointing to the output Service definition
# use name to differ type of route (e.g. 'vanity', 'eai', ...)
routes:
  {}
  # vanity:
  #   host: "ezldap.muenchen.de"
  #   path: "/vanity"
  #   wildcardPolicy: "None"
  #   annotations:
  #     haproxy.router.openshift.io/timeout: "30s"
  #   tls:
  #     termination: "Edge"
  #     insecureEdgeTerminationPolicy: "Redirect"
  #     key:
  #       certificate: ""
  #       caCertificate: ""
  #       destinationCACertificate: ""
  # eai:
  #   host: "ezldap-eai.muenchen.de"
  #   wildcardPolicy: "None"
  #   annotations:
  #     haproxy.router.openshift.io/timeout: "30s"
  #     haproxy.router.openshift.io/ip_whitelist: "X.X.X.X Y.Y.Y.Y"
  #   tls:
  #     termination: "Edge"
  #     insecureEdgeTerminationPolicy: "Redirect"
  #     key:
  #       certificate: ""
  #       caCertificate: ""
  #       destinationCACertificate: ""

# credentials configures secrets mounted as volumes that will be picked up by Spring Boot
# use name to differ type of credential (e.g. 'database', 'sso', ...)
credentials:
  {}
  # database:
  #   # to use an existing secret (key = spring property, e.g. 'spring.datasource.password' and value)
  #   existingSecret: my-database-secret
  #   # data:
  #   #   spring.datasource.url: "jdbc://mydatabase:5432"
  #   #   spring.datasource.username: "user"
  #   #   spring.datasource.password: "password"
  # sso:
  #   # existingSecret: my-sso-secret
  #   # to generate a secret based on key/value data
  #   data:
  #     app.security.client-id: "myClient"
  #     app.security.client-secret: "secret"

# initContainers can be used to specify init containers (e.g. to use AppDynamics)
initContainers:
  {}
  # - name: appdynamics-init
  #   image: image-registry.openshift-image-registry.svc:5000/openshift/appdynamics-java-agent:24.10.0.36431
  #   imagePullPolicy: IfNotPresent
  #   command:
  #     - cp
  #     - "-r"
  #     - /opt/appdynamics/.
  #     - /appd
  #   volumeMounts:
  #     - name: appd-files
  #       mountPath: /appd

# serviceMonitor can be used to create a ServiceMonitor resource to scrape metrics
serviceMonitor:
  enabled: false
  # path configures the path of the metrics/prometheus endpoint
  path: "/actuator/prometheus"

build:
  # enables the creation of a BuildConfig + ImageStream to perform "binary" S2I-Builds
  enabled: false
  # S2I Builder image (name, tag, namespace)
  builderImageStreamName: "ubi9-openjdk-21"
  builderImageStreamTag: "latest"
  builderImageStreamNamespace: "openshift"
  # configure name of the (output) imagestream, required
  outputImageStreamName: ""
  # configure tag of output image
  outputImageStreamTag: "latest"
