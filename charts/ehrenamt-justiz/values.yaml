# YAML anchors to allow reuse in this file
cacertsVolume: &cacertsVolume
  - name: cacerts-volume
    secret:
      defaultMode: 420
      secretName: cacerts-lhm
      items:
        - key: cacerts-lhm
          path: cacerts
cacertsVolumeMount: &cacertsVolumeMount
  - mountPath: /etc/pki/ca-trust/extracted/java
    name: cacerts-volume
    readOnly: true
# Module-specific configuration
modules:
  frontend:
    name: frontend-???
    replicas: 2
    image:
      # Please don't use the tag latest, because every time the image is updated you need to restart the pod.
      # In Openshift you can use the ImageStreamTrigger. https://docs.redhat.com/en/documentation/openshift_container_platform/4.18/html/images/triggering-updates-on-imagestream-changes
      # You can use direct the version number of an inmutable image. for example: 1.0.0
      registry: ghcr.io
      repository: it-at-m/ehrenamt-justiz/ehrenamt-justiz-frontend
      tag: dev
    service:
      http: true
  online:
    name: online-???
    replicas: 2
    image:
      # Please don't use the tag latest, because every time the image is updated you need to restart the pod.
      # In Openshift you can use the ImageStreamTrigger. https://docs.redhat.com/en/documentation/openshift_container_platform/4.18/html/images/triggering-updates-on-imagestream-changes
      # You can use direct the version number of an inmutable image. for example: 1.0.0
      registry: ghcr.io
      repository: it-at-m/ehrenamt-justiz/ehrenamt-justiz-online
      tag: dev
    service:
      http: true
  backend:
    name: backend-???
    replicas: 2
    service:
      http: true
    image:
      # Please don't use the tag latest, because every time the image is updated you need to restart the pod.
      # In Openshift you can use the ImageStreamTrigger. https://docs.redhat.com/en/documentation/openshift_container_platform/4.18/html/images/triggering-updates-on-imagestream-changes
      # You can use direct the version number of an inmutable image. for example: 1.0.0
      registry: ghcr.io
      repository: it-at-m/ehrenamt-justiz/ehrenamt-justiz-backend
      tag: dev
    env:
      - name: SECURITY_LOGGINGMODE
        value: "all"
      # mappings, normally don't have to be changed
      - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWKSETURI
        value: "${SSO_URL}/auth/realms/${SSO_REALM}/protocol/openid-connect/certs"
      # validates, that the client is contained in the aud claim
      # requires setup of an according mapper
      #- name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_AUDIENCES_0
      #  value: "${SSO_CLIENTID}"
      - name: SECURITY_USERINFOURI
        value: "${SSO_URL}/auth/realms/${SSO_REALM}/protocol/openid-connect/userinfo"
    volumeMounts:
      - mountPath: /config-application-env
        name: config-application-env
      - mountPath: /mnt
        name: cacerts-lhm
        readOnly: true

  eai:
    name: eai-???
    replicas: 2
    service:
      http: true
    image:
      # Please don't use the tag latest, because every time the image is updated you need to restart the pod.
      # In Openshift you can use the ImageStreamTrigger. https://docs.redhat.com/en/documentation/openshift_container_platform/4.18/html/images/triggering-updates-on-imagestream-changes
      # You can use direct the version number of an inmutable image. for example: 1.0.0
      registry: ghcr.io
      repository: it-at-m/ehrenamt-justiz/ehrenamt-justiz-eai
      tag: dev
    volumeMounts:
      - mountPath: /config-application-env
        name: config-application-env
      - mountPath: /mnt
        name: cacerts-lhm
        readOnly: true

  aenderungsservice:
    name: aenderungsservice-???
    replicas: 2
    service:
      http: true
    image:
      # Please don't use the tag latest, because every time the image is updated you need to restart the pod.
      # In Openshift you can use the ImageStreamTrigger. https://docs.redhat.com/en/documentation/openshift_container_platform/4.18/html/images/triggering-updates-on-imagestream-changes
      # You can use direct the version number of an inmutable image. for example: 1.0.0
      registry: ghcr.io
      repository: it-at-m/ehrenamt-justiz/ehrenamt-justiz-aenderungsservice
      tag: dev
    volumeMounts:
      - mountPath: /config-application-env
        name: config-application-env
      - mountPath: /mnt
        name: cacerts-lhm
        readOnly: true
# Sample Gateway configuration, which is enabled by default. For further configuration option view the chart dependency on https://github.com/it-at-m/helm-charts/tree/main/charts/refarch-gateway
refarch-gateway:
  envAppend:
    - name: SPRING_PROFILES_ACTIVE
      value: "hazelcast-k8s"
    - name: ALLOWED_ORIGINS_PUBLIC
      value: "http://localhost:*, ${SSO_URL}"
    - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_SCOPE
      value: "profile, openid"
    - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_PROVIDER
      value: "sso"
    # mappings, normally don't have to be changed
    - name: SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI
      value: "${SSO_URL}/auth/realms/${SSO_REALM}"
    - name: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_SSO_ISSUER_URI
      value: "${SSO_URL}/auth/realms/${SSO_REALM}"
    - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTID
      value: "${SSO_CLIENTID}"
    - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_SSO_CLIENTSECRET
      value: "${SSO_CLIENTSECRET}"
  applicationYML:
    spring:
      cloud:
        gateway:
          server:
            webflux:
              routes:
                - id: "sso"
                  uri: "${SSO_URL}"
                  predicates:
                    - "Path=/api/sso/userinfo"
                  filters:
                    - "RewritePath=/api/sso/userinfo, /auth/realms/${SSO_REALM}/protocol/openid-connect/userinfo"
                - id: "online"
                  uri: "http://ehrenamt-justiz-online:8080/"
                  predicates:
                    - "Path=/public/online/**"
                - id: "backend"
                  uri: "http://ehrenamt-justiz-backend:8080/"
                  predicates:
                    - "Path=/api/ej-app-backend-service/**"
                  filters:
                    - "RewritePath=/api/ehrenamt-justiz-backend/(?<urlsegments>.*), /$\\{urlsegments}"
                - id: "backendonline"
                  uri: "http://ehrenamt-justiz-backend:8080/"
                  predicates:
                    - "Path=/public/online/**"
                  filters:
                    - "RewritePath=/public/backend/(?<urlsegments>.*), /$\\{urlsegments}"
                - id: "backendaenderungsservice"
                  uri: "http://ehrenamt-justiz-backend:8080/"
                  predicates:
                    - "Path=/public/aenderungsservice/**"
                  filters:
                    - "RewritePath=/public/aenderungsservice/(?<urlsegments>.*), /$\\{urlsegments}"
                - id: "eai"
                  uri: "http://ehrenamt-justiz-eai:8080/"
                  predicates:
                    - "Path=/api/ehrenamt-justiz-eai/**"
                  filters:
                    - "RewritePath=/api/ehrenamt-justiz-eai/(?<urlsegments>.*), /$\\{urlsegments}"
                # The catch all route needs to be stand at the end.
                - id: "frontend"
                  uri: "http://ehrenamt-justiz-frontend:8080/"
                  predicates:
                    - "Path=/**"
  ingress:
    enabled: true
    hosts:
      - host: mygateway.example.com
        paths:
          - path: /
            pathType: "ImplementationSpecific"
    # OpenShift-specific configuration, if you have plain Kubernetes, you will need to change the annotations, className.
    # annotations:
    #   route.openshift.io/termination: "edge"
    # className: openshift-default
  volumes: *cacertsVolume
  volumeMounts: *cacertsVolumeMount
